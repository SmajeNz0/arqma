FROM debian:stretch-slim

ENV ANDROID_NDK_ROOT /opt/android/ndk

ENV ARM_PATH $ANDROID_NDK_ROOT/toolchains/llvm/prebuilt/linux-x86_64/bin:$ANDROID_NDK_ROOT/toolchains/arm-linux-androideabi-4.9/prebuilt/linux-x86_64/bin:$PATH
ENV ARM64_PATH $ANDROID_NDK_ROOT/toolchains/llvm/prebuilt/linux-x86_64/bin:$ANDROID_NDK_ROOT/toolchains/aarch64-linux-android-4.9/prebuilt/linux-x86_64/bin:$PATH
ENV X86_PATH $ANDROID_NDK_ROOT/toolchains/llvm/prebuilt/linux-x86_64/bin:$ANDROID_NDK_ROOT/toolchains/x86-4.9/prebuilt/linux-x86_64/bin:$PATH
ENV X64_PATH $ANDROID_NDK_ROOT/toolchains/llvm/prebuilt/linux-x86_64/bin:$ANDROID_NDK_ROOT/toolchains/x86_64-4.9/prebuilt/linux-x86_64/bin:$PATH
ENV ANDROID_API 21

RUN set -ex  \
    && apt-get update \
    && apt-get install -y eatmydata \
    && apt-get --no-install-recommends --yes install \
    ca-certificates apt-transport-https curl unzip automake python build-essential file pkg-config libssl-dev libtool-bin git cmake \
    && rm -rf /var/lib/apt/lists/*

WORKDIR /opt/android

#Cmake
ARG CMAKE_VERSION=3.19.1
ARG CMAKE_VERSION_DOT=v3.19
ARG CMAKE_HASH=1d266ea3a76ef650cdcf16c782a317cb4a7aa461617ee941e389cb48738a3aba
RUN set -ex \
    && curl -s -O https://cmake.org/files/${CMAKE_VERSION_DOT}/cmake-${CMAKE_VERSION}.tar.gz \
    && echo "${CMAKE_HASH}  cmake-${CMAKE_VERSION}.tar.gz" | sha256sum -c \
    && tar -xzf cmake-${CMAKE_VERSION}.tar.gz \
    && rm -f cmake-${CMAKE_VERSION}.tar.gz \
    && cd cmake-${CMAKE_VERSION} \
    && ./configure \
    && make \
    && make install

## Getting Android NDK
RUN ANDROID_NDK_REVISION=21d \
    && ANDROID_NDK_HASH=bcf4023eb8cb6976a4c7cff0a8a8f145f162bf4d \
    && curl -s -O https://dl.google.com/android/repository/android-ndk-r${ANDROID_NDK_REVISION}-linux-x86_64.zip \
    && echo "${ANDROID_NDK_HASH}  android-ndk-r${ANDROID_NDK_REVISION}-linux-x86_64.zip" | sha1sum -c \
    && unzip android-ndk-r${ANDROID_NDK_REVISION}-linux-x86_64.zip \
    && rm -f android-ndk-r${ANDROID_NDK_REVISION}-linux-x86_64.zip \
    && ln -s android-ndk-r${ANDROID_NDK_REVISION} ndk

## Building OpenSSL
RUN OPENSSL_VERSION=1.1.1g \
    && OPENSSL_HASH=ddb04774f1e32f0c49751e21b67216ac87852ceb056b75209af2443400636d46 \
    && curl -L -s -O https://www.openssl.org/source/old/1.1.1/openssl-${OPENSSL_VERSION}.tar.gz \
    && echo "${OPENSSL_HASH}  openssl-${OPENSSL_VERSION}.tar.gz" | sha256sum -c \
    && tar -xzvf ./openssl-${OPENSSL_VERSION}.tar.gz \
    && rm -f ./openssl-${OPENSSL_VERSION}.tar.gz \
    && mkdir -pv /opt/android/build/openssl/ \
    && cd ./openssl-${OPENSSL_VERSION} \
    && export ANDROID_NDK_HOME=$ANDROID_NDK_ROOT \
    && PATH=$ARM_PATH ; CC=clang \
    ./Configure android-arm -D__ANDROID_API__=$ANDROID_API \
    && make \
    && mkdir -pv /opt/android/build/openssl/arm/include/ \
    && mkdir -pv /opt/android/build/openssl/arm/lib/ \
    && cp libcrypto.a libcrypto.so /opt/android/build/openssl/arm/lib/ \
    && cp libssl.a libssl.so /opt/android/build/openssl/arm/lib/ \
    && make clean \
    && PATH=$ARM64_PATH ; CC=clang \
    ./Configure android-arm64 -D__ANDROID_API__=$ANDROID_API \
    && make \
    && mkdir -pv /opt/android/build/openssl/arm64/include/ \
    && mkdir -pv /opt/android/build/openssl/arm64/lib/ \
    && cp libcrypto.a libcrypto.so /opt/android/build/openssl/arm64/lib \
    && cp libssl.a libssl.so /opt/android/build/openssl/arm64/lib \
    && make clean \
    && PATH=$X86_PATH ; CC=clang \
    ./Configure android-x86 -D__ANDROID_API__=$ANDROID_API \
    && make \
    && mkdir -pv /opt/android/build/openssl/x86/include/ \
    && mkdir -pv /opt/android/build/openssl/x86/lib/ \
    && cp libcrypto.a libcrypto.so /opt/android/build/openssl/x86/lib \
    && cp libssl.a libssl.so /opt/android/build/openssl/x86/lib \
    && make clean \
    && PATH=$X64_PATH ; CC=clang \
    ./Configure android-x86_64 -D__ANDROID_API__=$ANDROID_API \
    && make \
    && mkdir -pv /opt/android/build/openssl/x86_64/include/ \
    && mkdir -pv /opt/android/build/openssl/x86_64/lib/ \
    && cp libcrypto.a libcrypto.so /opt/android/build/openssl/x86_64/lib \
    && cp libssl.a libssl.so /opt/android/build/openssl/x86_64/lib \
    && mkdir -pv /opt/android/build/include/openssl \
    && cp -r /opt/android/openssl-${OPENSSL_VERSION}/include/openssl/* /opt/android/build/include/openssl/ \
    && ln -s /opt/android/build/include/openssl /opt/android/build/openssl/arm/include \
    && ln -s /opt/android/build/include/openssl /opt/android/build/openssl/arm64/include \
    && ln -s /opt/android/build/include/openssl /opt/android/build/openssl/x86/include \
    && ln -s /opt/android/build/include/openssl /opt/android/build/openssl/x86_64/include

## Building Boost
RUN  git clone https://github.com/moritz-wundke/Boost-for-Android.git \
     && cd Boost-for-Android \
     && ./build-android.sh --verbose --arch=armeabi-v7a,arm64-v8a,x86,x86_64 --target-version=$ANDROID_API $ANDROID_NDK_ROOT \
     --boost=1.73.0 --with-libraries=system,filesystem,thread,date_time,chrono,regex,serialization,program_options \
     && mkdir -p  /opt/android/build/boost \
     && cp -r /opt/android/Boost-for-Android/build/out/* /opt/android/build/boost/ \
     && mv /opt/android/build/boost/armeabi-v7a /opt/android/build/boost/arm \
     && mv /opt/android/build/boost/arm64-v8a /opt/android/build/boost/arm64

# Sodium
RUN SODIUM_VERSION=1.0.18-RELEASE \
    && SODIUM_HASH=940ef42797baa0278df6b7fd9e67c7590f87744b \
    && set -ex \
    && cd /opt/android \
    && git clone https://github.com/jedisct1/libsodium.git -b ${SODIUM_VERSION} --depth=1 \
    && cd libsodium \
    && test `git rev-parse HEAD` = ${SODIUM_HASH} || exit 1 \
    && ./autogen.sh

## Building Sodium
RUN cd /opt/android/libsodium \
    && PATH=$ARM_PATH ; CC=clang CXX=clang++ CFLAGS="-fPIC" CXXFLAGS="-fPIC" \
    ./configure --prefix=/opt/android/build/libsodium/arm --host=arm-linux-androideabi --enable-static --disable-shared \
    && make \
    && make install \
    && make clean \
    && PATH=$ARM64_PATH ; CC=clang CXX=clang++ CFLAGS="-fPIC" CXXFLAGS="-fPIC" \
    ./configure --prefix=/opt/android/build/libsodium/arm64 --host=aarch64-linux-android --enable-static --disable-shared \
    && make \
    && make install \
    && make clean \
    && PATH=$X86_PATH ; CC=clang CXX=clang++ CFLAGS="-fPIC" CXXFLAGS="-fPIC" \
    ./configure --prefix=/opt/android/build/libsodium/x86 --host=i686-linux-android --enable-static --disable-shared \
    && make \
    && make install \
    && make clean \
    && PATH=$X64_PATH ; CC=clang CXX=clang++ CFLAGS="-fPIC" CXXFLAGS="-fPIC" \
    ./configure --prefix=/opt/android/build/libsodium/x86_64 --host=x86_64-linux-android --enable-static --disable-shared \
    && make \
    && make install \
    && make clean
    
# ZMQ
RUN ZMQ_VERSION=v4.3.3 \
    && ZMQ_HASH=04f5bbedee58c538934374dc45182d8fc5926fa3 \
    && set -ex \
    && cd /opt/android \
    && git clone https://github.com/zeromq/libzmq.git -b ${ZMQ_VERSION} --depth=1 \
    && cd libzmq \
    && test `git rev-parse HEAD` = ${ZMQ_HASH} || exit 1

## Building ZMQ
RUN cd /opt/android/libzmq/builds/android \
    && export MIN_SDK_VERSION=$ANDROID_API \
    && ./build.sh arm \
    && ./build.sh arm64 \
    && ./build.sh x86 \
    && ./build.sh x86_64 \
    && mkdir -pv /opt/android/build/libzmq \ 
    && cp -r ./prefix/* /opt/android/build/libzmq/

# zmq.hpp
RUN CPPZMQ_VERSION=v4.7.1 \
    && CPPZMQ_HASH=76bf169fd67b8e99c1b0e6490029d9cd5ef97666 \
    && set -ex \
    && cd /opt/android \
    && git clone https://github.com/zeromq/cppzmq.git -b ${CPPZMQ_VERSION} \
    && cd cppzmq \
    && test `git rev-parse HEAD` = ${CPPZMQ_HASH} || exit 1 \
    && mkdir -p /opt/android/build/cppzmq/include \
    && mv *.hpp /opt/android/build/cppzmq/include/

# Building Arqma from the latest commit on android branch, this should be kept up to date with master
# with the necessary fixes by m@lbit, crtlib and m2049r to build for mobile.
# RUN cd /opt/android \
#    && git clone -b android https://github.com/malbit/arqma.git --recursive --depth=1 \
#    && cd arqma \
#    && mkdir -p build/release \
#    && ./build-all-arch.sh


# Uncomment this section to use Arqma from the docker directory if you want to
# easily build a custom version not depending on the specified branch above and
# comment out the section above that pulls from github.
# ADD arqma /opt/android/arqma

RUN cd /opt/android \
    && git clone https://github.com/SmajeNz0/arqma.git --recursive --depth=1 \
    && cd arqma \
    && mkdir -p build/release \
    && ./build-all-arch.sh \
    && mkdir -pv /opt/android/arqma/build/release.arm/external/libzmq \
    && cp  /opt/android/build/libzmq/arm/lib/libzmq.a /opt/android/arqma/build/release.arm/external/libzmq/ \
    && mkdir -pv /opt/android/arqma/build/release.arm64/external/libzmq \
    && cp  /opt/android/build/libzmq/arm64/lib/libzmq.a /opt/android/arqma/build/release.arm64/external/libzmq/ \
    && mkdir -pv /opt/android/arqma/build/release.x86/external/libzmq \
    && cp  /opt/android/build/libzmq/x86/lib/libzmq.a /opt/android/arqma/build/release.x86/external/libzmq/ \
    && mkdir -pv /opt/android/arqma/build/release.x86_64/external/libzmq
    cp  /opt/android/build/libzmq/x86_64/lib/libzmq.a /opt/android/arqma/build/release.x86/external/libzmq/

